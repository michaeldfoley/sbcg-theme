//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: $line-height-computed;
  font-size: ($font-size-base * 1.5);
  line-height: inherit;
  border: 0;
}

label {
  display: inline-block;
  max-width: 100%;
  margin-bottom: 5px;
  font-weight: $font-weight-strong;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  box-sizing: border-box;
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-form-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
select,
textarea,
input[type="text"],
input[type="password"],
input[type="datetime"],
input[type="datetime-local"],
input[type="date"],
input[type="month"],
input[type="time"],
input[type="week"],
input[type="number"],
input[type="email"],
input[type="url"],
input[type="search"],
input[type="tel"],
input[type="color"] {
  
  display: block;
  width: 100%;
  padding: $padding-form-vertical $padding-form-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    border-color: $input-border-focus;
    outline: 0;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba($input-border-focus, .6);
  }

  // Placeholder
  &::-moz-placeholder {
    color: $input-color-placeholder;
    opacity: 1;
  }
  &:-ms-input-placeholder { color: $input-color-placeholder; }
  &::-webkit-input-placeholder  { color: $input-color-placeholder; }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
select,
input[type="text"],
input[type="password"],
input[type="datetime"],
input[type="datetime-local"],
input[type="date"],
input[type="month"],
input[type="time"],
input[type="week"],
input[type="number"],
input[type="email"],
input[type="url"],
input[type="search"],
input[type="tel"],
input[type="color"] {
  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    line-height: $input-height-base;
  }
}


// Container
//
// Seperate the form from other elements

.form-container {
  margin-top: $line-height-computed * 2;
  
  @media (min-width: $screen-xs) {
    padding: 30px 40px;
    border: 1px solid $gray-lighter;
    border-radius: 5px;
    max-width: $screen-xs;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;

  label {
    min-height: $line-height-computed; // Ensure the input doesn't jump when there is no text
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: $font-weight-base;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: $font-weight-base;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $cursor-disabled;
    }
  }
}


// Gravity forms
//
// Customizations specific to gravity forms

.gform_wrapper {
  margin-bottom: $line-height-computed;
}

.gform_fields {
  padding: 0;
  list-style: none;
}

.gfield {
  margin-bottom: $line-height-computed;
}

.gform_title {
  margin-top: 0;
  margin-bottom: $line-height-computed;
}

.gfield_description {
  font-size: .9em;
}

.gfield_label,
.gfield_list th {
  font-size: .85em;
  letter-spacing: .05em;
  text-transform: uppercase;
}

.gfield_list {
  width: 100%;
  
  th {
    font-weight: $font-weight-base;
  }
}
.gfield_list_cell {
  padding-right: 20px;
  padding-bottom: 15px;
}

.ginput_container,
.ginput_complex {
  display: flex;
  flex-wrap: wrap;
}

.ginput_container label {
  font-weight: $font-weight-base;
}

.ginput_full {
  display: block;
  width: 100%;
}

.ginput_left,
.ginput_right {
  flex: 1;
}

.ginput_left,
.address_state {
  margin-right: 20px;
}


// Gravity forms: radio buttons and checkboxes

.gfield_radio {
  list-style: none;
  padding-left: 0;
  
  li {
    margin-bottom: 0px;
  }
  
  input {
    margin-right: 10px;
  }
}


// Gravity forms: buttons

.gform_button,
.gform_next_button {
  @include button-variant($btn-primary-color, $btn-primary-bg, $btn-primary-border);
}


// Gravity forms: icons

.gfield_list_icons {
  width: 2.7em;
}

// Gravity forms: complex fields

.ginput_complex label{
  margin-top: $line-height-computed/2;
}

.ginput_complex .ginput_full:first-child label:first-child {
  margin-top: 0;
}

// Gravity forms: credit card

.gform_card_icon_container {
  display: block;
  width: 100%;
  line-height: 0;
}

.gform_card_icon {
  width: 50px;
  height: 32px;
  margin-right: 7px;
  display: inline-block;
  background-size: auto 100%;
  @include text-hide();
  transition: opacity .2s ease-out;
}

.gform_card_icon_inactive {
  opacity: 0.2;
}

.ginput_card_security_code_icon {
  display: none;
}
 
.ginput_card_expiration_month {
  margin-right: 15px;
}

.ginput_cardinfo_left {
  flex: 2;
}

.ginput_card_expiration_container {
  display: flex;
  flex-wrap: wrap;
  
  label {
    width: 100%;
  }
}

.ginput_cardinfo_right,
.ginput_cardinfo_left, 
.ginput_card_expiration {
  flex: 1
}

@media (min-width: $screen-xxs) {
  
  .ginput_cardinfo_left {
    margin-right: 30px;
  }
  
  .ginput_cardextras {
    display: flex;
  }
}

// Gravity forms: feedback states

.gfield_error {
  input {
    border-color: $state-error-border;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
    
    &:focus {
      border-color: darken($state-error-border, 10%);
      box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($state-error-border, 20%);
    }
  }
}

.gfield_error .validation_message,
.validation_error {
  color: $state-error-text;
}

.validation_error {
  background: $state-error-bg;
  border: 1px solid $state-error-border;
  border-radius: 4px;
  margin-bottom: $line-height-computed;
  padding: $padding-form-vertical $padding-form-horizontal;
}


// Gravity forms: hide honeypot

.gform_validation_container {
  display: none !important;
  position: absolute !important;
  left: -9000px;
}
